{"ast":null,"code":"var _jsxFileName = \"/Users/zoekatz/apps/cai-app/src/components/FeaturesModal/FeaturesModal.tsx\";\nimport React, { useCallback, useContext, useEffect, useState, useMemo } from 'react';\nimport FeaturesTable from '../FeaturesTable/FeaturesTable';\nimport { fetchFeatures, fetchModelMetadata } from '../../lib/mock-api';\nimport FeaturesFilters from \"../FeaturesFilters/FeaturesFilters\";\nimport './FeaturesModal.scss';\nimport FeaturesContext from \"../../FeaturesContext\";\n\nconst FeaturesModal = () => {\n  const [featuresFlatData, setFeaturesFlatData] = useState([]);\n  const [featuresModelMetadata, setFeaturesModelMetadata] = useState({\n    labels: [],\n    domains: []\n  });\n  const [featuresColumns, setFeaturesColumns] = useState([]);\n  const {\n    dispatch,\n    query\n  } = useContext(FeaturesContext);\n  const featuresColumnArr = useMemo(() => {\n    return [{\n      Header: 'NAME',\n      accessor: 'name'\n    }, {\n      Header: 'VARIABLE ID',\n      accessor: 'varId'\n    }, {\n      Header: 'DESCRIPTION',\n      accessor: 'description'\n    }, {\n      Header: 'DOMAINS',\n      accessor: 'domains',\n      cell: () => /*#__PURE__*/React.createElement(\"select\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }\n      }, featuresModelMetadata && featuresModelMetadata.domains.map((val, index) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: val,\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 36\n          }\n        }, val);\n      }))\n    }, {\n      Header: 'LABELS',\n      accessor: 'labels',\n      cell: () => /*#__PURE__*/React.createElement(\"select\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }\n      }, featuresModelMetadata && featuresModelMetadata.labels.map((val, index) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: val,\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 36\n          }\n        }, val);\n      }))\n    }, {\n      Header: 'SOURCES',\n      accessor: 'sources'\n    }, {\n      Header: 'VALUE',\n      accessor: 'value'\n    }];\n  }, [featuresModelMetadata]);\n  const getFeaturesData = useCallback(() => {\n    return fetchFeatures();\n  }, []);\n  const getModeMetadata = useCallback(() => {\n    return fetchModelMetadata();\n  }, []);\n  useEffect(() => {\n    getFeaturesData().then(res => {\n      if (res) {\n        setFeaturesFlatData(res.map(item => {\n          return { ...item,\n            ...item.attributes\n          };\n        }));\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n    getModeMetadata().then(res => {\n      if (res) {\n        setFeaturesModelMetadata(res);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  useEffect(() => {\n    setFeaturesColumns(featuresColumnArr);\n  }, [featuresFlatData, featuresModelMetadata]);\n  const filterFeaturesData = useMemo(() => {\n    return featuresFlatData.filter(feature => {\n      return feature.name && feature.name.toLowerCase().indexOf(query.toLowerCase()) > -1 || feature.description && feature.description.toLowerCase().indexOf(query.toLowerCase()) > -1;\n    });\n  }, [featuresFlatData, query]);\n  return !!featuresFlatData.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"features-modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => {\n      dispatch({\n        type: 'SET_IS_DIALOG_OPEN',\n        payload: {\n          isDialogOpen: false\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FeaturesFilters, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FeaturesTable, {\n    columns: featuresColumns,\n    data: filterFeaturesData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Loading...\");\n};\n\nexport default FeaturesModal;","map":{"version":3,"sources":["/Users/zoekatz/apps/cai-app/src/components/FeaturesModal/FeaturesModal.tsx"],"names":["React","useCallback","useContext","useEffect","useState","useMemo","FeaturesTable","fetchFeatures","fetchModelMetadata","FeaturesFilters","FeaturesContext","FeaturesModal","featuresFlatData","setFeaturesFlatData","featuresModelMetadata","setFeaturesModelMetadata","labels","domains","featuresColumns","setFeaturesColumns","dispatch","query","featuresColumnArr","Header","accessor","cell","map","val","index","getFeaturesData","getModeMetadata","then","res","item","attributes","catch","err","console","log","filterFeaturesData","filter","feature","name","toLowerCase","indexOf","description","length","type","payload","isDialogOpen"],"mappings":"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","sourcesContent":["import React, {useCallback, useContext, useEffect, useState, useMemo} from 'react';\nimport FeaturesTable from '../FeaturesTable/FeaturesTable';\nimport {fetchFeatures, fetchModelMetadata} from '../../lib/mock-api';\nimport {ICrFlatNode, IModelMetadata, IColumnNode} from \"../../lib/types\";\nimport FeaturesFilters from \"../FeaturesFilters/FeaturesFilters\";\nimport './FeaturesModal.scss';\nimport FeaturesContext from \"../../FeaturesContext\";\n\n\nconst FeaturesModal = () => {\n    const [featuresFlatData, setFeaturesFlatData] = useState<ICrFlatNode[]>([]);\n    const [featuresModelMetadata, setFeaturesModelMetadata] = useState<IModelMetadata>({labels: [], domains: []});\n    const [featuresColumns, setFeaturesColumns] = useState<IColumnNode[]>([]);\n    const {dispatch, query} = useContext(FeaturesContext);\n\n    const featuresColumnArr = useMemo(() => {\n        return [\n            {\n                Header: 'NAME',\n                accessor: 'name',\n            },\n            {\n                Header: 'VARIABLE ID',\n                accessor: 'varId',\n            },\n            {\n                Header: 'DESCRIPTION',\n                accessor: 'description',\n            },\n            {\n                Header: 'DOMAINS',\n                accessor: 'domains',\n                cell: () => (\n                    <select>\n                        {featuresModelMetadata && featuresModelMetadata.domains.map((val, index) => {\n                            return <option value={val} key={index}>{val}</option>;\n                        })}\n                    </select>\n                )\n            },\n            {\n                Header: 'LABELS',\n                accessor: 'labels',\n                cell: () => (\n                    <select>\n                        {featuresModelMetadata && featuresModelMetadata.labels.map((val, index) => {\n                            return <option value={val} key={index}>{val}</option>;\n                        })}\n                    </select>\n                )\n            },\n            {\n                Header: 'SOURCES',\n                accessor: 'sources',\n            },\n            {\n                Header: 'VALUE',\n                accessor: 'value',\n            }\n        ]\n\n    }, [featuresModelMetadata]);\n\n    const getFeaturesData = useCallback(() => {\n        return fetchFeatures();\n    }, []);\n\n    const getModeMetadata = useCallback(() => {\n        return fetchModelMetadata();\n    }, []);\n\n    useEffect(() => {\n        getFeaturesData().then((res) => {\n            if(res) {\n                setFeaturesFlatData(res.map(item => {\n                    return {\n                        ...item,\n                        ...item.attributes\n                    }\n                }));\n            }\n        }).catch((err) => {\n            console.log(err)\n        });\n\n        getModeMetadata().then((res) => {\n            if(res) {\n                setFeaturesModelMetadata(res);\n            }\n        }).catch((err) => {\n            console.log(err)\n        });\n    }, []);\n\n    useEffect(() => {\n        setFeaturesColumns(featuresColumnArr)\n\n    }, [featuresFlatData, featuresModelMetadata]);\n\n    const filterFeaturesData = useMemo(() => {\n        return featuresFlatData.filter(feature => {\n            return (feature.name && feature.name.toLowerCase().indexOf(query.toLowerCase()) > -1) || (feature.description && feature.description.toLowerCase().indexOf(query.toLowerCase()) > -1)\n        })\n    }, [featuresFlatData, query]);\n\n    return !!featuresFlatData.length ? (\n        <div className=\"features-modal\">\n            <div onClick={() => {dispatch({type: 'SET_IS_DIALOG_OPEN',payload: {isDialogOpen: false}})}}>X</div>\n            <div>\n                <FeaturesFilters/>\n                <FeaturesTable columns={featuresColumns} data={filterFeaturesData}/>\n            </div>\n        </div> ): (\n        <div>Loading...</div>\n    )\n};\n\nexport default FeaturesModal;\n"]},"metadata":{},"sourceType":"module"}