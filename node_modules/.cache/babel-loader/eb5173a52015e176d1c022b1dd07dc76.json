{"ast":null,"code":"var _jsxFileName = \"/Users/zoekatz/apps/cai-app/src/components/FeaturesTable/FeaturesTable.tsx\";\nimport React from 'react';\nimport { useTable, useSortBy, useGroupBy, usePagination, useResizeColumns, useRowSelect } from 'react-table';\nimport { HeaderCheckbox, RowCheckbox } from './FeaturesTableStyles';\n\nconst FeaturesTable = ({\n  columns,\n  data\n}) => {\n  const headerProps = (props, {\n    column\n  }) => getStyles(props, column && column.disableResizing, column && column.align);\n\n  const cellProps = (props, {\n    cell\n  }) => getStyles(props, cell.column && cell.column.disableResizing, cell.column && cell.column.align);\n\n  const selectionHook = hooks => {\n    hooks.allColumns.push(columns => [// Let's make a column for selection\n    {\n      id: '_selector',\n      disableResizing: true,\n      disableGroupBy: true,\n      minWidth: 45,\n      width: 45,\n      maxWidth: 45,\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/React.createElement(HeaderCheckbox, Object.assign({}, getToggleAllRowsSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }\n      })),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => /*#__PURE__*/React.createElement(RowCheckbox, Object.assign({}, row.getToggleRowSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 52\n        }\n      }))\n    }, ...columns]);\n    hooks.useInstanceBeforeDimensions.push(({\n      headerGroups\n    }) => {\n      // fix the parent group of the selection button to not be resizable\n      const selectionGroupHeader = headerGroups[0].headers[0];\n      selectionGroupHeader.canResize = false;\n    });\n  };\n\n  const hooks = [useGroupBy, useSortBy, usePagination, useResizeColumns, useRowSelect, selectionHook]; // Use the state and functions returned from useTable to build your UI\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }, ...hooks); // Render the UI for your table\n\n  return /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), column.getSortByToggleProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }), column.render('Header'), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 118\n    }\n  }, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : '')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 36\n        }\n      }), cell.render('Cell'));\n    }));\n  })));\n};\n\nexport default FeaturesTable;","map":{"version":3,"sources":["/Users/zoekatz/apps/cai-app/src/components/FeaturesTable/FeaturesTable.tsx"],"names":["React","useTable","useSortBy","useGroupBy","usePagination","useResizeColumns","useRowSelect","HeaderCheckbox","RowCheckbox","FeaturesTable","columns","data","headerProps","props","column","getStyles","disableResizing","align","cellProps","cell","selectionHook","hooks","allColumns","push","id","disableGroupBy","minWidth","width","maxWidth","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","useInstanceBeforeDimensions","headerGroups","selectionGroupHeader","headers","canResize","getTableProps","getTableBodyProps","rows","prepareRow","map","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","i","getRowProps","cells","getCellProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useTable, useSortBy, useGroupBy, usePagination, useResizeColumns, useRowSelect, Hooks } from 'react-table';\nimport { HeaderCheckbox, RowCheckbox, useStyles } from './FeaturesTableStyles';\n\n\nconst FeaturesTable = ({ columns, data } : any) => {\n\n    const headerProps = <T extends object>(props: any, { column }: Meta<T, { column: HeaderGroup<T> }>) =>\n        getStyles(props, column && column.disableResizing, column && column.align);\n\n    const cellProps = <T extends object>(props: any, { cell }: Meta<T, { cell: Cell<T> }>) =>\n        getStyles(props, cell.column && cell.column.disableResizing, cell.column && cell.column.align);\n\n\n    const selectionHook = (hooks: Hooks<any>) => {\n        hooks.allColumns.push((columns: any) => [\n            // Let's make a column for selection\n            {\n                id: '_selector',\n                disableResizing: true,\n                disableGroupBy: true,\n                minWidth: 45,\n                width: 45,\n                maxWidth: 45,\n                // The header can use the table's getToggleAllRowsSelectedProps method\n                // to render a checkbox\n                Header: ({ getToggleAllRowsSelectedProps }: HeaderProps<any>) => (\n                    <HeaderCheckbox {...getToggleAllRowsSelectedProps()} />\n                ),\n                // The cell can use the individual row's getToggleRowSelectedProps method\n                // to the render a checkbox\n                Cell: ({ row }: CellProps<any>) => <RowCheckbox {...row.getToggleRowSelectedProps()} />,\n            },\n            ...columns,\n        ])\n        hooks.useInstanceBeforeDimensions.push(({ headerGroups }) => {\n            // fix the parent group of the selection button to not be resizable\n            const selectionGroupHeader = headerGroups[0].headers[0]\n            selectionGroupHeader.canResize = false\n        })\n    };\n\n    const hooks = [\n        useGroupBy,\n        useSortBy,\n        usePagination,\n        useResizeColumns,\n        useRowSelect,\n        selectionHook,\n    ];\n\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable({\n        columns,\n        data,\n    }, ...hooks);\n\n    // Render the UI for your table\n    return (\n        <table {...getTableProps()}>\n            <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => (\n                        <th {...column.getHeaderProps()} {...column.getSortByToggleProps()}>{column.render('Header')}<span>\n                    {column.isSorted\n                        ? column.isSortedDesc\n                            ? ' ðŸ”½'\n                            : ' ðŸ”¼'\n                        : ''}\n                  </span></th>\n                    ))}\n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n                prepareRow(row)\n                return (\n                    <tr {...row.getRowProps()}>\n                        {row.cells.map(cell => {\n                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        })}\n                    </tr>\n                )\n            })}\n            </tbody>\n        </table>\n    )\n};\n\nexport default FeaturesTable;\n"]},"metadata":{},"sourceType":"module"}