{"ast":null,"code":"var _jsxFileName = \"/Users/zoekatz/apps/cai-app/src/components/FeaturesModal/FeaturesModal.tsx\";\nimport React, { useCallback, useContext, useEffect, useState, useMemo } from 'react';\nimport FeaturesTable from '../FeaturesTable/FeaturesTable';\nimport { fetchFeatures, fetchModelMetadata } from '../../lib/mock-api';\nimport FeaturesFilters from \"../FeaturesFilters/FeaturesFilters\";\nimport './FeaturesModal.scss';\nimport FeaturesContext from \"../../FeaturesContext\";\n\nconst FeaturesModal = () => {\n  const [featuresColumns, setFeaturesColumns] = useState([]);\n  const {\n    dispatch,\n    query,\n    featuresFlatData,\n    featuresModelMetadata,\n    filterByLabelValue,\n    filterByDomainValue\n  } = useContext(FeaturesContext);\n  const featuresColumnArr = useMemo(() => {\n    return [{\n      Header: 'NAME',\n      accessor: 'name'\n    }, {\n      Header: 'VARIABLE ID',\n      accessor: 'varId'\n    }, {\n      Header: 'DESCRIPTION',\n      accessor: 'description'\n    }, {\n      Header: 'DOMAINS',\n      accessor: (originalRow, rowIndex) => originalRow.domains,\n      Cell: row => {\n        console.log(row, \"featuresModelMetadata\");\n        return /*#__PURE__*/React.createElement(\"select\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"option\", {\n          value: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 25\n          }\n        }, `${row.value.length} selected`), featuresModelMetadata && featuresModelMetadata.domains.map((val, index) => {\n          return /*#__PURE__*/React.createElement(\"option\", {\n            value: val,\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 36\n            }\n          }, val);\n        }));\n      }\n    }, {\n      Header: 'LABELS',\n      accessor: 'labels',\n      Cell: row => /*#__PURE__*/React.createElement(\"select\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }\n      }, `${row.value.length} selected`), featuresModelMetadata && featuresModelMetadata.labels.map((val, index) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: val,\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 36\n          }\n        }, val);\n      }))\n    }, {\n      Header: 'VALUE',\n      accessor: 'value'\n    }];\n  }, [featuresModelMetadata.labels, featuresModelMetadata.domains]);\n  const getFeaturesData = useCallback(() => {\n    return fetchFeatures();\n  }, []);\n  const getModeMetadata = useCallback(() => {\n    return fetchModelMetadata();\n  }, []);\n  useEffect(() => {\n    getFeaturesData().then(res => {\n      if (res) {\n        const featuresFlatData = res.map(item => {\n          return { ...item,\n            ...item.attributes\n          };\n        });\n        dispatch({\n          type: 'SET_FEATURES_FLAT_DATA',\n          payload: {\n            featuresFlatData\n          }\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n    getModeMetadata().then(res => {\n      if (res) {\n        dispatch({\n          type: 'SET_FEATURES_MODEL_METADATA',\n          payload: {\n            featuresModelMetadata: res\n          }\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  useEffect(() => {\n    setFeaturesColumns(featuresColumnArr);\n  }, [featuresFlatData, featuresModelMetadata]);\n  const filterFeaturesData = useMemo(() => {\n    return featuresFlatData && featuresFlatData.filter(feature => {\n      console.log(feature, \"feature\");\n      return feature.name && feature.name.toLowerCase().indexOf(query.toLowerCase()) > -1 || feature.description && feature.description.toLowerCase().indexOf(query.toLowerCase()) > -1 || feature.labels.includes(filterByLabelValue) || feature.domains.includes(filterByDomainValue);\n    });\n  }, [featuresFlatData, featuresModelMetadata, query, filterByLabelValue, filterByDomainValue]);\n  return useMemo(() => {\n    return featuresFlatData && !!featuresFlatData.length ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"features-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => {\n        dispatch({\n          type: 'SET_IS_DIALOG_OPEN',\n          payload: {\n            isDialogOpen: false\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FeaturesFilters, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FeaturesTable, {\n      columns: featuresColumns,\n      data: filterFeaturesData,\n      dispatch: dispatch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, \"Loading...\");\n  }, [dispatch, featuresColumns, filterFeaturesData, featuresFlatData]);\n};\n\nexport default FeaturesModal;","map":{"version":3,"sources":["/Users/zoekatz/apps/cai-app/src/components/FeaturesModal/FeaturesModal.tsx"],"names":["React","useCallback","useContext","useEffect","useState","useMemo","FeaturesTable","fetchFeatures","fetchModelMetadata","FeaturesFilters","FeaturesContext","FeaturesModal","featuresColumns","setFeaturesColumns","dispatch","query","featuresFlatData","featuresModelMetadata","filterByLabelValue","filterByDomainValue","featuresColumnArr","Header","accessor","originalRow","rowIndex","domains","Cell","row","console","log","value","length","map","val","index","labels","getFeaturesData","getModeMetadata","then","res","item","attributes","type","payload","catch","err","filterFeaturesData","filter","feature","name","toLowerCase","indexOf","description","includes","isDialogOpen"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,EAA6DC,OAA7D,QAA2E,OAA3E;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAAQC,aAAR,EAAuBC,kBAAvB,QAAgD,oBAAhD;AAEA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAO,sBAAP;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAGA,MAAMC,aAAa,GAAG,MAAM;AACxB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAgB,EAAhB,CAAtD;AACA,QAAM;AAACU,IAAAA,QAAD;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,gBAAlB;AAAoCC,IAAAA,qBAApC;AAA2DC,IAAAA,kBAA3D;AAA+EC,IAAAA;AAA/E,MAAsGjB,UAAU,CAACQ,eAAD,CAAtH;AAEA,QAAMU,iBAAiB,GAAGf,OAAO,CAAC,MAAM;AACpC,WAAO,CACH;AACIgB,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,QAAQ,EAAE;AAFd,KADG,EAKH;AACID,MAAAA,MAAM,EAAE,aADZ;AAEIC,MAAAA,QAAQ,EAAE;AAFd,KALG,EASH;AACID,MAAAA,MAAM,EAAE,aADZ;AAEIC,MAAAA,QAAQ,EAAE;AAFd,KATG,EAaH;AACID,MAAAA,MAAM,EAAE,SADZ;AAEIC,MAAAA,QAAQ,EAAE,CAACC,WAAD,EAAmBC,QAAnB,KAAqCD,WAAW,CAACE,OAF/D;AAGIC,MAAAA,IAAI,EAAGC,GAAD,IAAc;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,uBAAjB;AACA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAQ,UAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmB,GAAEA,GAAG,CAACG,KAAJ,CAAUC,MAAO,WAAtC,CADJ,EAEKd,qBAAqB,IAAIA,qBAAqB,CAACQ,OAAtB,CAA8BO,GAA9B,CAAkC,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACxE,8BAAO;AAAQ,YAAA,KAAK,EAAED,GAAf;AAAoB,YAAA,GAAG,EAAEC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAiCD,GAAjC,CAAP;AACH,SAFyB,CAF9B,CADA;AAOF;AAZN,KAbG,EA2BH;AACIZ,MAAAA,MAAM,EAAE,QADZ;AAEIC,MAAAA,QAAQ,EAAE,QAFd;AAGII,MAAAA,IAAI,EAAGC,GAAD,iBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAQ,QAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmB,GAAEA,GAAG,CAACG,KAAJ,CAAUC,MAAO,WAAtC,CADJ,EAEKd,qBAAqB,IAAIA,qBAAqB,CAACkB,MAAtB,CAA6BH,GAA7B,CAAiC,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACvE,4BAAO;AAAQ,UAAA,KAAK,EAAED,GAAf;AAAoB,UAAA,GAAG,EAAEC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiCD,GAAjC,CAAP;AACH,OAFyB,CAF9B;AAJR,KA3BG,EAuCH;AACIZ,MAAAA,MAAM,EAAE,OADZ;AAEIC,MAAAA,QAAQ,EAAE;AAFd,KAvCG,CAAP;AA6CH,GA9CgC,EA8C9B,CAACL,qBAAqB,CAACkB,MAAvB,EAA+BlB,qBAAqB,CAACQ,OAArD,CA9C8B,CAAjC;AAgDA,QAAMW,eAAe,GAAGnC,WAAW,CAAC,MAAM;AACtC,WAAOM,aAAa,EAApB;AACH,GAFkC,EAEhC,EAFgC,CAAnC;AAIA,QAAM8B,eAAe,GAAGpC,WAAW,CAAC,MAAM;AACtC,WAAOO,kBAAkB,EAAzB;AACH,GAFkC,EAEhC,EAFgC,CAAnC;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACZiC,IAAAA,eAAe,GAAGE,IAAlB,CAAwBC,GAAD,IAAS;AAC5B,UAAGA,GAAH,EAAQ;AACJ,cAAMvB,gBAAgB,GAAGuB,GAAG,CAACP,GAAJ,CAAQQ,IAAI,IAAI;AACrC,iBAAO,EACH,GAAGA,IADA;AAEH,eAAGA,IAAI,CAACC;AAFL,WAAP;AAIH,SALwB,CAAzB;AAMA3B,QAAAA,QAAQ,CAAC;AAAC4B,UAAAA,IAAI,EAAE,wBAAP;AAAiCC,UAAAA,OAAO,EAAE;AAAE3B,YAAAA;AAAF;AAA1C,SAAD,CAAR;AACH;AACJ,KAVD,EAUG4B,KAVH,CAUUC,GAAD,IAAS;AACdjB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACH,KAZD;AAcAR,IAAAA,eAAe,GAAGC,IAAlB,CAAwBC,GAAD,IAAS;AAC5B,UAAGA,GAAH,EAAQ;AACJzB,QAAAA,QAAQ,CAAC;AAAC4B,UAAAA,IAAI,EAAE,6BAAP;AAAsCC,UAAAA,OAAO,EAAE;AAAE1B,YAAAA,qBAAqB,EAAEsB;AAAzB;AAA/C,SAAD,CAAR;AACH;AACJ,KAJD,EAIGK,KAJH,CAIUC,GAAD,IAAS;AACdjB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACH,KAND;AAOH,GAtBQ,EAsBN,EAtBM,CAAT;AAwBA1C,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,kBAAkB,CAACO,iBAAD,CAAlB;AAEH,GAHQ,EAGN,CAACJ,gBAAD,EAAmBC,qBAAnB,CAHM,CAAT;AAKA,QAAM6B,kBAAkB,GAAGzC,OAAO,CAAC,MAAM;AACrC,WAAOW,gBAAgB,IAAIA,gBAAgB,CAAC+B,MAAjB,CAAwBC,OAAO,IAAI;AAC1DpB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,OAAZ,EAAqB,SAArB;AACA,aAAQA,OAAO,CAACC,IAAR,IAAgBD,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,OAA3B,CAAmCpC,KAAK,CAACmC,WAAN,EAAnC,IAA0D,CAAC,CAA5E,IAAmFF,OAAO,CAACI,WAAR,IAAuBJ,OAAO,CAACI,WAAR,CAAoBF,WAApB,GAAkCC,OAAlC,CAA0CpC,KAAK,CAACmC,WAAN,EAA1C,IAAiE,CAAC,CAA5K,IACHF,OAAO,CAACb,MAAR,CAAekB,QAAf,CAAwBnC,kBAAxB,CADG,IAC8C8B,OAAO,CAACvB,OAAR,CAAgB4B,QAAhB,CAAyBlC,mBAAzB,CADrD;AAEH,KAJ0B,CAA3B;AAKH,GANiC,EAM/B,CAACH,gBAAD,EAAmBC,qBAAnB,EAA0CF,KAA1C,EAAiDG,kBAAjD,EAAqEC,mBAArE,CAN+B,CAAlC;AAQA,SAAOd,OAAO,CAAC,MAAM;AAEjB,WAAOW,gBAAgB,IAAI,CAAC,CAACA,gBAAgB,CAACe,MAAvC,gBACH;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,OAAO,EAAE,MAAM;AAACjB,QAAAA,QAAQ,CAAC;AAAC4B,UAAAA,IAAI,EAAE,oBAAP;AAA4BC,UAAAA,OAAO,EAAE;AAACW,YAAAA,YAAY,EAAE;AAAf;AAArC,SAAD,CAAR;AAAsE,OAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAE1C,eAAxB;AAAyC,MAAA,IAAI,EAAEkC,kBAA/C;AAAmE,MAAA,QAAQ,EAAEhC,QAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAFJ,CADG,gBAQH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARJ;AAUH,GAZa,EAYZ,CAACA,QAAD,EAAWF,eAAX,EAA4BkC,kBAA5B,EAAgD9B,gBAAhD,CAZY,CAAd;AAaH,CA9GD;;AAgHA,eAAeL,aAAf","sourcesContent":["import React, {useCallback, useContext, useEffect, useState, useMemo} from 'react';\nimport FeaturesTable from '../FeaturesTable/FeaturesTable';\nimport {fetchFeatures, fetchModelMetadata} from '../../lib/mock-api';\nimport {IColumnNode} from \"../../lib/types\";\nimport FeaturesFilters from \"../FeaturesFilters/FeaturesFilters\";\nimport './FeaturesModal.scss';\nimport FeaturesContext from \"../../FeaturesContext\";\n\n\nconst FeaturesModal = () => {\n    const [featuresColumns, setFeaturesColumns] = useState<IColumnNode[]>([]);\n    const {dispatch, query, featuresFlatData, featuresModelMetadata, filterByLabelValue, filterByDomainValue} = useContext(FeaturesContext);\n\n    const featuresColumnArr = useMemo(() => {\n        return [\n            {\n                Header: 'NAME',\n                accessor: 'name',\n            },\n            {\n                Header: 'VARIABLE ID',\n                accessor: 'varId',\n            },\n            {\n                Header: 'DESCRIPTION',\n                accessor: 'description',\n            },\n            {\n                Header: 'DOMAINS',\n                accessor: (originalRow: any, rowIndex: any) => originalRow.domains,\n                Cell: (row: any) => {\n                    console.log(row, \"featuresModelMetadata\")\n                    return (\n                    <select>\n                        <option value=\"\">{`${row.value.length} selected`}</option>\n                        {featuresModelMetadata && featuresModelMetadata.domains.map((val, index) => {\n                            return <option value={val} key={index}>{val}</option>;\n                        })}\n                    </select>\n                )}\n            },\n            {\n                Header: 'LABELS',\n                accessor: 'labels',\n                Cell: (row: any) => (\n                    <select>\n                        <option value=\"\">{`${row.value.length} selected`}</option>\n                        {featuresModelMetadata && featuresModelMetadata.labels.map((val, index) => {\n                            return <option value={val} key={index}>{val}</option>;\n                        })}\n                    </select>\n                )\n            },\n            {\n                Header: 'VALUE',\n                accessor: 'value',\n            }\n        ]\n\n    }, [featuresModelMetadata.labels, featuresModelMetadata.domains]);\n\n    const getFeaturesData = useCallback(() => {\n        return fetchFeatures();\n    }, []);\n\n    const getModeMetadata = useCallback(() => {\n        return fetchModelMetadata();\n    }, []);\n\n    useEffect(() => {\n        getFeaturesData().then((res) => {\n            if(res) {\n                const featuresFlatData = res.map(item => {\n                    return {\n                        ...item,\n                        ...item.attributes\n                    }\n                });\n                dispatch({type: 'SET_FEATURES_FLAT_DATA', payload: { featuresFlatData }});\n            }\n        }).catch((err) => {\n            console.log(err)\n        });\n\n        getModeMetadata().then((res) => {\n            if(res) {\n                dispatch({type: 'SET_FEATURES_MODEL_METADATA', payload: { featuresModelMetadata: res }})\n            }\n        }).catch((err) => {\n            console.log(err)\n        });\n    }, []);\n\n    useEffect(() => {\n        setFeaturesColumns(featuresColumnArr)\n\n    }, [featuresFlatData, featuresModelMetadata]);\n\n    const filterFeaturesData = useMemo(() => {\n        return featuresFlatData && featuresFlatData.filter(feature => {\n            console.log(feature, \"feature\")\n            return (feature.name && feature.name.toLowerCase().indexOf(query.toLowerCase()) > -1) || (feature.description && feature.description.toLowerCase().indexOf(query.toLowerCase()) > -1)\n            || (feature.labels.includes(filterByLabelValue)) || (feature.domains.includes(filterByDomainValue))\n        })\n    }, [featuresFlatData, featuresModelMetadata, query, filterByLabelValue, filterByDomainValue]);\n\n    return useMemo(() => {\n\n        return featuresFlatData && !!featuresFlatData.length ? (\n            <div className=\"features-modal\">\n                <div onClick={() => {dispatch({type: 'SET_IS_DIALOG_OPEN',payload: {isDialogOpen: false}})}}>X</div>\n                <div>\n                    <FeaturesFilters />\n                    <FeaturesTable columns={featuresColumns} data={filterFeaturesData} dispatch={dispatch}/>\n                </div>\n            </div> ): (\n            <div>Loading...</div>\n        )\n    },[dispatch, featuresColumns, filterFeaturesData, featuresFlatData]);\n};\n\nexport default FeaturesModal;\n"]},"metadata":{},"sourceType":"module"}