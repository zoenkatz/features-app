{"ast":null,"code":"var _jsxFileName = \"/Users/zoekatz/apps/cai-app/src/components/FeaturesModal/FeaturesModal.tsx\";\nimport React, { useCallback, useContext, useEffect, useState, useMemo } from 'react';\nimport FeaturesTable from '../FeaturesTable/FeaturesTable';\nimport FeatureButton from '../FeaturesButton/FeaturesButton';\nimport { fetchFeatures, fetchModelMetadata } from '../../lib/mock-api';\nimport FeaturesFilters from \"../FeaturesFilters/FeaturesFilters\";\nimport './FeaturesModal.scss';\nimport FeaturesContext from \"../../FeaturesContext\";\n\nconst FeaturesModal = () => {\n  const [featuresColumns, setFeaturesColumns] = useState([]);\n  const {\n    dispatch,\n    query,\n    featuresFlatData,\n    featuresModelMetadata,\n    filterByLabelValue,\n    filterByDomainValue,\n    isLoading\n  } = useContext(FeaturesContext);\n  const [currentPage, setCurrentPage] = useState(1);\n  const pageNumbers = [];\n  const featuresPerPage = 3;\n  const indexOfLastFeature = currentPage * featuresPerPage;\n  const indexOfFirstFeature = indexOfLastFeature - featuresPerPage;\n\n  for (let i = 1; i <= Math.ceil(featuresFlatData.length / featuresPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const featuresColumnArr = useMemo(() => {\n    return [{\n      Header: 'NAME',\n      accessor: 'name'\n    }, {\n      Header: 'VARIABLE ID',\n      accessor: 'varId'\n    }, {\n      Header: 'DESCRIPTION',\n      accessor: 'description'\n    }, {\n      Header: 'DOMAINS',\n      accessor: (originalRow, rowIndex) => originalRow.domains,\n      Cell: row => {\n        console.log(row, \"featuresModelMetadata\");\n        return /*#__PURE__*/React.createElement(\"select\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"option\", {\n          value: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }\n        }, `${row.value.length} selected`), featuresModelMetadata && featuresModelMetadata.domains.map((val, index) => {\n          return /*#__PURE__*/React.createElement(\"option\", {\n            value: val,\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 36\n            }\n          }, val);\n        }));\n      }\n    }, {\n      Header: 'LABELS',\n      accessor: 'labels',\n      Cell: row => /*#__PURE__*/React.createElement(\"select\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }\n      }, `${row.value.length} selected`), featuresModelMetadata && featuresModelMetadata.labels.map((val, index) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: val,\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 36\n          }\n        }, val);\n      }))\n    }, {\n      Header: 'VALUE',\n      accessor: 'value'\n    }];\n  }, [featuresModelMetadata.labels, featuresModelMetadata.domains]);\n  const getFeaturesData = useCallback(() => {\n    return fetchFeatures();\n  }, []);\n  const getModeMetadata = useCallback(() => {\n    return fetchModelMetadata();\n  }, []);\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [featuresFlatData]);\n  useEffect(() => {\n    Promise.all([getFeaturesData(), getModeMetadata()]).then(res => {\n      if (res && Array.isArray(res[0]) && Object.keys(res[1])) {\n        const featuresFlatData = res[0].map(item => {\n          return { ...item,\n            ...item.attributes\n          };\n        });\n        dispatch({\n          type: 'SET_FEATURES_DATA',\n          payload: {\n            featuresFlatData,\n            featuresModelMetadata: res[1],\n            isLoading: false\n          }\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  useEffect(() => {\n    setFeaturesColumns(featuresColumnArr);\n  }, [featuresFlatData, featuresModelMetadata]);\n  const filterFeaturesData = useMemo(() => {\n    return featuresFlatData && featuresFlatData.filter(feature => {\n      console.log(feature, \"feature\");\n      return (feature.name && feature.name.toLowerCase().indexOf(query.toLowerCase()) > -1 || feature.description && feature.description.toLowerCase().indexOf(query.toLowerCase()) > -1) && (feature.labels.includes(filterByLabelValue) || filterByLabelValue === '') && (feature.domains.includes(filterByDomainValue) || filterByDomainValue === '');\n    }).slice(indexOfFirstFeature, indexOfLastFeature);\n  }, [featuresFlatData, featuresModelMetadata, query, filterByLabelValue, filterByDomainValue]);\n  return useMemo(() => {\n    return featuresFlatData && !!featuresFlatData.length ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"features-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => {\n        dispatch({\n          type: 'SET_IS_DIALOG_OPEN',\n          payload: {\n            isDialogOpen: false\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"features-modal-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FeaturesFilters, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FeaturesTable, {\n      columns: featuresColumns,\n      data: filterFeaturesData,\n      setCurrentPage: setCurrentPage,\n      dispatch: dispatch,\n      pageNumbers: pageNumbers,\n      currentPage: currentPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FeatureButton, {\n      buttonValue: \"Save & Compute\",\n      onClickButton: () => {\n        dispatch({\n          type: 'SET_IS_DIALOG_OPEN',\n          payload: {\n            isDialogOpen: false\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    })) : isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, \"No Data\");\n  }, [dispatch, featuresColumns, filterFeaturesData, featuresFlatData, isLoading]);\n};\n\nexport default FeaturesModal;","map":{"version":3,"sources":["/Users/zoekatz/apps/cai-app/src/components/FeaturesModal/FeaturesModal.tsx"],"names":["React","useCallback","useContext","useEffect","useState","useMemo","FeaturesTable","FeatureButton","fetchFeatures","fetchModelMetadata","FeaturesFilters","FeaturesContext","FeaturesModal","featuresColumns","setFeaturesColumns","dispatch","query","featuresFlatData","featuresModelMetadata","filterByLabelValue","filterByDomainValue","isLoading","currentPage","setCurrentPage","pageNumbers","featuresPerPage","indexOfLastFeature","indexOfFirstFeature","i","Math","ceil","length","push","featuresColumnArr","Header","accessor","originalRow","rowIndex","domains","Cell","row","console","log","value","map","val","index","labels","getFeaturesData","getModeMetadata","Promise","all","then","res","Array","isArray","Object","keys","item","attributes","type","payload","catch","err","filterFeaturesData","filter","feature","name","toLowerCase","indexOf","description","includes","slice","isDialogOpen"],"mappings":"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","sourcesContent":["import React, {useCallback, useContext, useEffect, useState, useMemo} from 'react';\nimport FeaturesTable from '../FeaturesTable/FeaturesTable';\nimport FeatureButton from '../FeaturesButton/FeaturesButton';\nimport {fetchFeatures, fetchModelMetadata} from '../../lib/mock-api';\nimport {IColumnNode} from \"../../lib/types\";\nimport FeaturesFilters from \"../FeaturesFilters/FeaturesFilters\";\nimport './FeaturesModal.scss';\nimport FeaturesContext from \"../../FeaturesContext\";\n\n\nconst FeaturesModal = () => {\n    const [featuresColumns, setFeaturesColumns] = useState<IColumnNode[]>([]);\n    const {dispatch, query, featuresFlatData, featuresModelMetadata, filterByLabelValue, filterByDomainValue, isLoading} = useContext(FeaturesContext);\n\n    const [currentPage, setCurrentPage] = useState(1);\n    const pageNumbers: number[] = [];\n    const featuresPerPage = 3;\n    const indexOfLastFeature = currentPage * featuresPerPage;\n    const indexOfFirstFeature = indexOfLastFeature - featuresPerPage;\n\n    for (let i = 1; i <= Math.ceil(featuresFlatData.length / featuresPerPage); i++) {\n        pageNumbers.push(i);\n    }\n\n    const featuresColumnArr = useMemo(() => {\n        return [\n            {\n                Header: 'NAME',\n                accessor: 'name',\n            },\n            {\n                Header: 'VARIABLE ID',\n                accessor: 'varId',\n            },\n            {\n                Header: 'DESCRIPTION',\n                accessor: 'description',\n            },\n            {\n                Header: 'DOMAINS',\n                accessor: (originalRow: any, rowIndex: any) => originalRow.domains,\n                Cell: (row: any) => {\n                    console.log(row, \"featuresModelMetadata\")\n                    return (\n                    <select>\n                        <option value=\"\">{`${row.value.length} selected`}</option>\n                        {featuresModelMetadata && featuresModelMetadata.domains.map((val, index) => {\n                            return <option value={val} key={index}>{val}</option>;\n                        })}\n                    </select>\n                )}\n            },\n            {\n                Header: 'LABELS',\n                accessor: 'labels',\n                Cell: (row: any) => (\n                    <select>\n                        <option value=\"\">{`${row.value.length} selected`}</option>\n                        {featuresModelMetadata && featuresModelMetadata.labels.map((val, index) => {\n                            return <option value={val} key={index}>{val}</option>;\n                        })}\n                    </select>\n                )\n            },\n            {\n                Header: 'VALUE',\n                accessor: 'value',\n            }\n        ]\n\n    }, [featuresModelMetadata.labels, featuresModelMetadata.domains]);\n\n    const getFeaturesData = useCallback(() => {\n        return fetchFeatures();\n    }, []);\n\n    const getModeMetadata = useCallback(() => {\n        return fetchModelMetadata();\n    }, []);\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [featuresFlatData]);\n\n    useEffect(() => {\n\n        Promise.all([getFeaturesData(), getModeMetadata()]).then((res) => {\n            if(res && Array.isArray(res[0]) && Object.keys(res[1])) {\n                const featuresFlatData = res[0].map(item => {\n                    return {\n                        ...item,\n                        ...item.attributes\n                    }\n                });\n                dispatch({type: 'SET_FEATURES_DATA', payload: { featuresFlatData, featuresModelMetadata: res[1], isLoading: false }});\n            }\n        }).catch((err) => {\n            console.log(err)\n        });\n    }, []);\n\n    useEffect(() => {\n        setFeaturesColumns(featuresColumnArr)\n\n    }, [featuresFlatData, featuresModelMetadata]);\n\n    const filterFeaturesData = useMemo(() => {\n        return featuresFlatData && featuresFlatData.filter(feature => {\n            console.log(feature, \"feature\")\n            return ((feature.name && feature.name.toLowerCase().indexOf(query.toLowerCase()) > -1) || (feature.description && feature.description.toLowerCase().indexOf(query.toLowerCase()) > -1))\n            && (feature.labels.includes(filterByLabelValue) || filterByLabelValue === '') && (feature.domains.includes(filterByDomainValue) || filterByDomainValue === '')\n        }).slice(indexOfFirstFeature, indexOfLastFeature);\n    }, [featuresFlatData, featuresModelMetadata, query, filterByLabelValue, filterByDomainValue]);\n\n    return useMemo(() => {\n\n        return featuresFlatData && !!featuresFlatData.length ? (\n            <div className=\"features-modal\">\n                <div onClick={() => {dispatch({type: 'SET_IS_DIALOG_OPEN',payload: {isDialogOpen: false}})}}>X</div>\n                <div className=\"features-modal-table\">\n                    <FeaturesFilters />\n                    <FeaturesTable columns={featuresColumns} data={filterFeaturesData} setCurrentPage={setCurrentPage} dispatch={dispatch} pageNumbers={pageNumbers} currentPage={currentPage}/>\n                </div>\n                <FeatureButton buttonValue='Save & Compute' onClickButton={() => {dispatch({type: 'SET_IS_DIALOG_OPEN',payload: {isDialogOpen: false}})}}/>\n            </div> ): isLoading ? (\n            <div>Loading...</div>\n        ) : <div>No Data</div>\n    },[dispatch, featuresColumns, filterFeaturesData, featuresFlatData, isLoading]);\n};\n\nexport default FeaturesModal;\n"]},"metadata":{},"sourceType":"module"}