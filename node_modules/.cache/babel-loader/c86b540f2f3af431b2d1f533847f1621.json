{"ast":null,"code":"var _jsxFileName = \"/Users/zoekatz/apps/cai-app/src/components/FeaturesTable/FeaturesTable.tsx\";\nimport React, { useEffect } from 'react';\nimport { useTable, useSortBy, useGroupBy, usePagination, useResizeColumns, useRowSelect } from 'react-table';\nimport { HeaderCheckbox, RowCheckbox } from './FeaturesTableStyles';\n\nconst FeaturesTable = ({\n  columns,\n  data\n}) => {\n  const selectionHook = hooks => {\n    hooks.allColumns.push(columns => [// Let's make a column for selection\n    {\n      id: '_selector',\n      disableResizing: true,\n      disableGroupBy: true,\n      minWidth: 45,\n      width: 45,\n      maxWidth: 45,\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => {\n        //console.log(getToggleAllRowsSelectedProps);\n        //const {state} = {...getToggleAllRowsSelectedProps()};\n        // dispatch({type: 'SET_SELECTED_ROWS_IDS', payload: {selectedRowsIDs: state.selectedRowIds}})\n        return /*#__PURE__*/React.createElement(HeaderCheckbox, Object.assign({}, getToggleAllRowsSelectedProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }\n        }));\n      },\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => /*#__PURE__*/React.createElement(RowCheckbox, Object.assign({}, row.getToggleRowSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 52\n        }\n      }))\n    }, ...columns]);\n    hooks.useInstanceBeforeDimensions.push(({\n      headerGroups\n    }) => {\n      // fix the parent group of the selection button to not be resizable\n      const selectionGroupHeader = headerGroups[0].headers[0];\n      selectionGroupHeader.canResize = false;\n    });\n  };\n\n  const hooks = [useGroupBy, useSortBy, usePagination, useResizeColumns, useRowSelect, selectionHook]; // Use the state and functions returned from useTable to build your UI\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state: {\n      pageIndex,\n      pageSize,\n      selectedRowIds\n    }\n  } = useTable({\n    columns,\n    data\n  }, ...hooks);\n  useEffect(() => {}, [selectedRowIds]); // Render the UI for your table\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), column.getSortByToggleProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }), column.render('Header'), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 118\n    }\n  }, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : '')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 36\n        }\n      }), cell.render('Cell'));\n    }));\n  }))));\n};\n\nexport default FeaturesTable;","map":{"version":3,"sources":["/Users/zoekatz/apps/cai-app/src/components/FeaturesTable/FeaturesTable.tsx"],"names":["React","useEffect","useTable","useSortBy","useGroupBy","usePagination","useResizeColumns","useRowSelect","HeaderCheckbox","RowCheckbox","FeaturesTable","columns","data","selectionHook","hooks","allColumns","push","id","disableResizing","disableGroupBy","minWidth","width","maxWidth","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","useInstanceBeforeDimensions","headerGroups","selectionGroupHeader","headers","canResize","getTableProps","getTableBodyProps","rows","prepareRow","state","pageIndex","pageSize","selectedRowIds","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {useTable, useSortBy, useGroupBy, usePagination, useResizeColumns, useRowSelect, Hooks, CellProps, HeaderProps} from 'react-table';\nimport { HeaderCheckbox, RowCheckbox } from './FeaturesTableStyles';\n\n\nconst FeaturesTable = ({ columns, data } : any) => {\n\n    const selectionHook = (hooks: Hooks<any>) => {\n        hooks.allColumns.push((columns: any) => [\n            // Let's make a column for selection\n            {\n                id: '_selector',\n                disableResizing: true,\n                disableGroupBy: true,\n                minWidth: 45,\n                width: 45,\n                maxWidth: 45,\n                // The header can use the table's getToggleAllRowsSelectedProps method\n                // to render a checkbox\n                Header: ({ getToggleAllRowsSelectedProps }: HeaderProps<any>) => {\n                    //console.log(getToggleAllRowsSelectedProps);\n                    //const {state} = {...getToggleAllRowsSelectedProps()};\n                   // dispatch({type: 'SET_SELECTED_ROWS_IDS', payload: {selectedRowsIDs: state.selectedRowIds}})\n                    return (\n                        <HeaderCheckbox {...getToggleAllRowsSelectedProps()}/>\n                    )\n                },\n                // The cell can use the individual row's getToggleRowSelectedProps method\n                // to the render a checkbox\n                Cell: ({ row }: CellProps<any>) => <RowCheckbox {...row.getToggleRowSelectedProps()} />,\n            },\n            ...columns,\n        ]);\n        hooks.useInstanceBeforeDimensions.push(({ headerGroups }) => {\n            // fix the parent group of the selection button to not be resizable\n            const selectionGroupHeader = headerGroups[0].headers[0]\n            selectionGroupHeader.canResize = false\n        })\n    };\n\n    const hooks = [\n        useGroupBy,\n        useSortBy,\n        usePagination,\n        useResizeColumns,\n        useRowSelect,\n        selectionHook,\n    ];\n\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state: { pageIndex, pageSize, selectedRowIds },\n    } = useTable({\n        columns,\n        data,\n    }, ...hooks);\n\n    useEffect(() => {\n\n    }, [selectedRowIds]);\n\n    // Render the UI for your table\n    return (\n        <>\n        <table {...getTableProps()}>\n            <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => (\n                        <th {...column.getHeaderProps()} {...column.getSortByToggleProps()}>{column.render('Header')}<span>\n                    {column.isSorted\n                        ? column.isSortedDesc\n                            ? ' ðŸ”½'\n                            : ' ðŸ”¼'\n                        : ''}\n                  </span></th>\n                    ))}\n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n                prepareRow(row)\n                return (\n                    <tr {...row.getRowProps()}>\n                        {row.cells.map(cell => {\n                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        })}\n                    </tr>\n                )\n            })}\n            </tbody>\n        </table>\n        </>\n    )\n};\n\nexport default FeaturesTable;\n"]},"metadata":{},"sourceType":"module"}